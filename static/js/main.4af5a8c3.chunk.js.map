{"version":3,"sources":["recoil/atoms.ts","services/PhotoService.ts","helpers/randomString.ts","components/Search/Search.tsx","components/Image/Image.tsx","components/SearchResult/SearchResult.tsx","components/SearchResultGrouped/SearchResultGrouped.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["valueState","atom","key","default","photosState","isGroupedState","PhotoService","tag","axios","get","this","url","params","api_key","then","response","result","data","image_url","error","description","payload","catch","randomString","i","randomLength","rnd","length","Math","random","toString","substring","searchRegexp","Search","className","useRecoilState","value","setValue","photos","setPhotos","isGrouped","setIsGrouped","useState","errorMessages","setErrorMessages","loading","setLoading","delayCounter","setDelayCounter","useEffect","effect","setTimeout","a","randomTag","replace","clearErrorMessages","addImage","clearTimeout","newErrorMessages","addErrorMessage","push","addPhotos","newPhotos","tags","currentPhotos","elements","map","x","search","tagsArray","split","filter","newValues","getPhoto","clsx","FormControl","onChange","v","target","placeholder","Button","onClick","validateForm","finally","disabled","Alert","variant","dismissible","y","Image","props","useSetRecoilState","classes","groupedTag","images","img","height","alt","src","SearchResult","useRecoilValue","photoRandomResult","SearchResultGrouped","photosGrouped","forEach","p","undefined","Object","keys","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af5a8c3.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\nimport PhotoRandomResult from '../interfaces/PhotoRandomResult';\r\n\r\nexport const valueState = atom({\r\n    key: 'valueState',\r\n    default: ''\r\n});\r\n\r\nexport const photosState = atom<PhotoRandomResult[]>({\r\n    key: 'photosState',\r\n    default: []\r\n});\r\n\r\nexport const isGroupedState = atom({\r\n    key: 'isGroupedState',\r\n    default: false\r\n});\r\n","import PhotoDto from '../interfaces/PhotoDto';\r\nimport axios from 'axios';\r\n\r\ntype PhotoResult = {\r\n    error: number;\r\n    description: string;\r\n    payload?: PhotoDto;\r\n}\r\n\r\nexport default class PhotoService {\r\n    private static url = 'https://api.giphy.com/v1/gifs/random';\r\n    public static async getPhoto(tag: string): Promise<PhotoResult> {\r\n        return await axios.get(this.url, {\r\n            params: {\r\n                api_key: 'gTJAO48YcpmrADUyo4opy4ES4g7iDBxx',\r\n                tag\r\n            }\r\n        }).then(response => {\r\n            const result: PhotoDto = response.data.data;\r\n            if (!result?.image_url) {\r\n                return {error: 1, description: `По тэгу '${tag}' ничего не найдено`};\r\n            }\r\n\r\n            return {\r\n                error: 0,\r\n                description: 'OK',\r\n                payload: {\r\n                    image_url: result.image_url,\r\n                    tag\r\n                }\r\n            };\r\n        }).catch(error => {\r\n            return {error: 2, description: `Произошла http ошибка`};\r\n        });\r\n    }\r\n}\r\n","import random from 'lodash/random';\r\n\r\nexport default function randomString(i: number, randomLength = true) {\r\n    let rnd = '';\r\n    while (rnd.length < i)\r\n        rnd += Math.random().toString(36).substring(2);\r\n\r\n    if (randomLength) {\r\n       return rnd.substring(0, random(1, i));\r\n    }\r\n\r\n    return rnd.substring(0, i);\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Alert, Button, FormControl } from 'react-bootstrap';\r\nimport clsx from 'clsx';\r\nimport './Search.scss';\r\nimport { useRecoilState } from 'recoil';\r\nimport { isGroupedState, photosState, valueState } from '../../recoil/atoms';\r\nimport Photo from '../../interfaces/Photo';\r\nimport PhotoService from '../../services/PhotoService';\r\nimport randomString from '../../helpers/randomString';\r\nimport PhotoRandomResult from '../../interfaces/PhotoRandomResult';\r\n\r\nconst searchRegexp = /[^a-z,\\s]/gi;\r\n\r\ntype Props = {\r\n    className: string;\r\n};\r\n\r\nexport function Search ({\r\n    className,\r\n}: Props) {\r\n    const [value, setValue] = useRecoilState(valueState);\r\n    const [photos, setPhotos] = useRecoilState(photosState);\r\n    const [isGrouped, setIsGrouped] = useRecoilState(isGroupedState);\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [delayCounter, setDelayCounter] = useState(0);\r\n    useEffect(() => {\r\n        let effect: NodeJS.Timeout | undefined;\r\n        if (delayCounter !== 0) {\r\n            effect = setTimeout(async () => {\r\n                const randomTag = randomString(10, true).replace(searchRegexp, '');\r\n                clearErrorMessages();\r\n                await addImage(randomTag, photos);\r\n                setDelayCounter(delayCounter + 1);\r\n            }, 5000);\r\n        }\r\n        return () => {\r\n            if (effect) clearTimeout(effect);\r\n        };\r\n    }, [delayCounter]);\r\n\r\n    let newErrorMessages = [...errorMessages];\r\n    const clearErrorMessages = () => {\r\n        newErrorMessages = [];\r\n        setErrorMessages([...newErrorMessages]);\r\n    }\r\n    const addErrorMessage = (error: string) => {\r\n        newErrorMessages.push(error);\r\n        setErrorMessages([...newErrorMessages]);\r\n    }\r\n\r\n    const addPhotos = (newPhotos: Photo[], tags: string, currentPhotos: PhotoRandomResult[]) => {\r\n        setPhotos([...currentPhotos, {\r\n            elements: newPhotos.map((x, i) => ({...x, tag: x.tag})),\r\n            search: tags,\r\n            key: Math.random().toString(),\r\n        }]);\r\n    };\r\n\r\n    const addImage = async (tags: string,  currentPhotos: PhotoRandomResult[]) => {\r\n        if (tags === 'delay') {\r\n            setDelayCounter(1);\r\n            return;\r\n        }\r\n\r\n        const tagsArray = tags.split(',').filter(x => !!x);\r\n        const newValues: Photo[] = [];\r\n        for (const tag of tagsArray) {\r\n            const result = await PhotoService.getPhoto(tag);\r\n            if (result.error !== 0) {\r\n                addErrorMessage(result.description);\r\n                continue;\r\n            }\r\n\r\n            newValues.push({\r\n                image_url: result.payload!.image_url,\r\n                tag\r\n            });\r\n        }\r\n\r\n        if (!newValues.length) return;\r\n\r\n        addPhotos(newValues, tags, currentPhotos);\r\n    };\r\n\r\n    const validateForm = (value: string): boolean => {\r\n        if (value.length === 0) {\r\n            addErrorMessage('заполните поле \\'тег\\'');\r\n            return false;\r\n        }\r\n\r\n        clearErrorMessages();\r\n        return true;\r\n    };\r\n\r\n    const clear = () => {\r\n        clearErrorMessages();\r\n        setValue('');\r\n        setPhotos([]);\r\n        setDelayCounter(0);\r\n    }\r\n\r\n    const onChangeValue = (v: string) => {\r\n        v = v.replace(searchRegexp, '');\r\n        v = v.replace(' ', '');\r\n        setValue(v);\r\n    }\r\n\r\n    const onSearch = () => {\r\n        clearErrorMessages();\r\n        if (validateForm(value)) {\r\n            setLoading(true);\r\n            addImage(value, photos).finally(() => setLoading(false));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={clsx(className)}>\r\n            <div className=\"search\">\r\n                <div className=\"d-flex justify-content-between search__buttons\">\r\n                    <div>\r\n                        <FormControl\r\n                            value={value}\r\n                            onChange={x => onChangeValue(x.target.value)}\r\n                            className=\"search__buttons-input\"\r\n                            placeholder=\"введите тег\"\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        className=\"search__buttons-submit\"\r\n                        onClick={onSearch}\r\n                        disabled={loading || delayCounter !== 0}\r\n                    >\r\n                        {loading || delayCounter ? \"Загрузка...\" : \"Загрузить\"}\r\n                    </Button>\r\n                    <Button\r\n                        className=\"search__buttons-clear\"\r\n                        onClick={clear}\r\n                    >\r\n                        Очистить\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => setIsGrouped(!isGrouped)}\r\n                        className=\"search__buttons-grouped\"\r\n                    >\r\n                        {isGrouped ? 'Разгруппировать' : 'Группировать'}\r\n                    </Button>\r\n                </div>\r\n                <div className=\"alert-block\">\r\n                    {errorMessages.map((error, i) => {\r\n                        return (\r\n                            <Alert\r\n                                key={i}\r\n                                className=\"mt-2 pointer\"\r\n                                variant=\"danger\"\r\n                                dismissible\r\n                                onClick={() => {\r\n                                    newErrorMessages = errorMessages.filter(y => y !== error);\r\n                                    setErrorMessages([...newErrorMessages]);\r\n                                }}\r\n                            >\r\n                                {error}\r\n                            </Alert>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React  from 'react';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { valueState } from '../../recoil/atoms';\r\nimport './Image.scss';\r\nimport clsx from 'clsx';\r\n\r\ntype Image = {\r\n    url: string;\r\n    tag: string;\r\n}\r\n\r\ntype Props = {\r\n    images: Image[];\r\n    groupedTag?: string;\r\n}\r\n\r\nexport default function Image(props: Props) {\r\n    const setValue = useSetRecoilState(valueState);\r\n    const classes = [];\r\n    if (props.groupedTag) classes.push('d-flex flex-row border m-2 image-wrapper-grouped');\r\n    else classes.push('m-2 d-flex border container flex-column border image-wrapper');\r\n\r\n    return (\r\n        <div className={props.groupedTag ? 'border p-2 m-2' : ''} >\r\n            {props.groupedTag && <h6 className=\"ml-2\">{props.groupedTag}</h6>}\r\n            <div className={clsx(classes)}>\r\n                {props.images.map(img => {\r\n                    return (\r\n                        <img\r\n                            key={img.tag+img.url}\r\n                            height={200 / props.images.length}\r\n                            alt={img.tag}\r\n                            src={img.url}\r\n                            onClick={() => setValue(img.tag)}\r\n                            className=\"p-1 border image\"\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Image from '../Image/Image';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { photosState } from '../../recoil/atoms';\r\nimport './SearchResult.scss';\r\n\r\ntype Props = {\r\n    className: string;\r\n};\r\n\r\nexport function SearchResult (props: Props) {\r\n    const photos = useRecoilValue(photosState);\r\n    return (\r\n        <div className={props.className}>\r\n            <div className=\"d-flex flex-row flex-wrap justify-content-center row-cols-3 search-result\">\r\n                {photos.map((photoRandomResult) => {\r\n                    return (\r\n                        <Image\r\n                            key={photoRandomResult.key}\r\n                            images={photoRandomResult.elements.map(y => ({url: y.image_url, tag: y.tag}))}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Image from '../Image/Image';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { photosState } from '../../recoil/atoms';\r\nimport './SearchResultGrouped.scss';\r\n\r\ntype Props = {\r\n    className: string;\r\n};\r\n\r\nexport function SearchResultGrouped (props: Props) {\r\n    const photos = useRecoilValue(photosState);\r\n    const photosGrouped: any = {};\r\n    photos.forEach(x => {\r\n        x.elements.forEach(p => {\r\n           if (photosGrouped[p.tag] === undefined) photosGrouped[p.tag] = [];\r\n\r\n           photosGrouped[p.tag].push({url: p.image_url, tag: p.tag});\r\n       })\r\n    });\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            <div className=\"d-flex flex-column flex-wrap justify-content-center search-result-grouped\">\r\n                {Object.keys(photosGrouped).map((groupedTag) => {\r\n                    return (\r\n                        <Image\r\n                            key={groupedTag}\r\n                            groupedTag={groupedTag}\r\n                            images={photosGrouped[groupedTag]}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React  from 'react';\nimport './App.scss';\nimport { Search } from './components/Search/Search';\nimport { SearchResult } from './components/SearchResult/SearchResult';\nimport { useRecoilValue } from 'recoil';\nimport { isGroupedState } from './recoil/atoms';\nimport { SearchResultGrouped } from './components/SearchResultGrouped/SearchResultGrouped';\n\nexport default function App() {\n    const isGrouped = useRecoilValue(isGroupedState);\n    return (\n        <div className=\"m-3 app\">\n            <Search className=\"d-flex justify-content-center\"/>\n            {!isGrouped && <SearchResult className=\"mt-3\"/>}\n            {isGrouped && <SearchResultGrouped className=\"mt-3\"/>}\n        </div>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n      <RecoilRoot>\n          <App />\n      </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}